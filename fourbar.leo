<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="amd.20151123233132.1" a="E"><vh>@clean index.html</vh>
<v t="amd.20151123225336.1" a="E"><vh>html</vh>
<v t="amd.20151123225336.2" a="E"><vh>head</vh>
<v t="amd.20151123225336.3"><vh>meta</vh></v>
<v t="amd.20151123225336.4"><vh>link</vh></v>
<v t="amd.20151123225336.5"><vh>link</vh></v>
<v t="amd.20151123225336.6"><vh>script</vh></v>
<v t="amd.20151123225336.7"><vh>script</vh></v>
<v t="amd.20151123225336.8"><vh>script</vh></v>
<v t="amd.20151123225336.9"><vh>script</vh></v>
</v>
<v t="amd.20151123225337.1" a="E"><vh>body</vh>
<v t="amd.20151123225337.2"><vh>h1</vh></v>
<v t="amd.20151123225337.4"><vh>ul</vh></v>
<v t="amd.20151123225337.22"><vh>div</vh></v>
<v t="amd.20151123225337.28" a="E"><vh>div</vh>
<v t="amd.20151123225337.29" a="E"><vh>div</vh>
<v t="amd.20151123225337.30"><vh>div</vh>
<v t="amd.20151123225337.31"><vh>input</vh></v>
</v>
<v t="amd.20151123225337.32" a="E"><vh>div</vh>
<v t="amd.20151123225337.33"><vh>div</vh>
<v t="amd.20151123225337.34"><vh>table</vh>
<v t="amd.20151123225337.35"><vh>tr</vh>
<v t="amd.20151123225337.36"><vh>td</vh></v>
</v>
<v t="amd.20151123225337.37"><vh>tr</vh>
<v t="amd.20151123225337.38"><vh>td</vh>
<v t="amd.20151123225337.39"><vh>input</vh></v>
</v>
</v>
<v t="amd.20151123225337.40"><vh>tr</vh>
<v t="amd.20151123225337.41"><vh>td</vh></v>
<v t="amd.20151123225337.42"><vh>td</vh>
<v t="amd.20151123225337.43"><vh>input</vh></v>
</v>
<v t="amd.20151123225337.44"><vh>td</vh></v>
</v>
</v>
<v t="amd.20151123225337.45"><vh>br</vh></v>
</v>
<v t="amd.20151123225337.46"><vh>div</vh>
<v t="amd.20151123225337.47"><vh>table</vh>
<v t="amd.20151123225337.48"><vh>tr</vh>
<v t="amd.20151123225337.49"><vh>td</vh></v>
</v>
<v t="amd.20151123225337.50"><vh>tr</vh>
<v t="amd.20151123225337.51"><vh>td</vh>
<v t="amd.20151123225337.52"><vh>input</vh></v>
</v>
</v>
<v t="amd.20151123225337.53"><vh>tr</vh>
<v t="amd.20151123225337.54"><vh>td</vh></v>
<v t="amd.20151123225337.55"><vh>td</vh>
<v t="amd.20151123225337.56"><vh>input</vh></v>
</v>
<v t="amd.20151123225337.57"><vh>td</vh></v>
</v>
</v>
<v t="amd.20151123225337.58"><vh>br</vh></v>
</v>
<v t="amd.20151123225337.59"><vh>div</vh>
<v t="amd.20151123225337.60"><vh>table</vh>
<v t="amd.20151123225337.61"><vh>tr</vh>
<v t="amd.20151123225337.62"><vh>td</vh></v>
</v>
<v t="amd.20151123225337.63"><vh>tr</vh>
<v t="amd.20151123225337.64"><vh>td</vh>
<v t="amd.20151123225337.65"><vh>input</vh></v>
</v>
</v>
<v t="amd.20151123225337.66"><vh>tr</vh>
<v t="amd.20151123225337.67"><vh>td</vh></v>
<v t="amd.20151123225337.68"><vh>td</vh>
<v t="amd.20151123225337.69"><vh>input</vh></v>
</v>
<v t="amd.20151123225337.70"><vh>td</vh></v>
</v>
</v>
<v t="amd.20151123225337.71"><vh>br</vh></v>
</v>
<v t="amd.20151123225337.72"><vh>div</vh>
<v t="amd.20151123225337.73"><vh>table</vh>
<v t="amd.20151123225337.74"><vh>tr</vh>
<v t="amd.20151123225337.75"><vh>td</vh></v>
</v>
<v t="amd.20151123225337.76"><vh>tr</vh>
<v t="amd.20151123225337.77"><vh>td</vh>
<v t="amd.20151123225337.78"><vh>input</vh></v>
</v>
</v>
<v t="amd.20151123225337.79"><vh>tr</vh>
<v t="amd.20151123225337.80"><vh>td</vh></v>
<v t="amd.20151123225337.81"><vh>td</vh>
<v t="amd.20151123225337.82"><vh>input</vh></v>
</v>
<v t="amd.20151123225337.83"><vh>td</vh></v>
</v>
</v>
<v t="amd.20151123225337.84"><vh>br</vh></v>
</v>
<v t="amd.20151123225337.85"><vh>div</vh>
<v t="amd.20151123225337.86"><vh>table</vh>
<v t="amd.20151123225337.87"><vh>tr</vh>
<v t="amd.20151123225337.88"><vh>td</vh></v>
</v>
<v t="amd.20151123225337.89"><vh>tr</vh>
<v t="amd.20151123225337.90"><vh>td</vh>
<v t="amd.20151123225337.91"><vh>input</vh></v>
</v>
</v>
<v t="amd.20151123225337.92"><vh>tr</vh>
<v t="amd.20151123225337.93"><vh>td</vh></v>
<v t="amd.20151123225337.94"><vh>td</vh>
<v t="amd.20151123225337.95"><vh>input</vh></v>
</v>
<v t="amd.20151123225337.96"><vh>td</vh></v>
</v>
</v>
<v t="amd.20151123225337.97"><vh>br</vh></v>
</v>
<v t="amd.20151123225337.98" a="E"><vh>div</vh>
<v t="amd.20151123225337.99"><vh>table</vh>
<v t="amd.20151123225337.100"><vh>tr</vh>
<v t="amd.20151123225337.101"><vh>td</vh></v>
</v>
<v t="amd.20151123225337.102"><vh>tr</vh>
<v t="amd.20151123225337.103"><vh>td</vh>
<v t="amd.20151123225337.104"><vh>input</vh></v>
</v>
</v>
<v t="amd.20151123225337.105"><vh>tr</vh>
<v t="amd.20151123225337.106"><vh>td</vh></v>
<v t="amd.20151123225337.107"><vh>td</vh>
<v t="amd.20151123225337.108"><vh>input</vh></v>
</v>
<v t="amd.20151123225337.109"><vh>td</vh></v>
</v>
</v>
<v t="amd.20151123225337.110"><vh>br</vh></v>
</v>
<v t="amd.20151123225337.111" a="E"><vh>div</vh>
<v t="amd.20151123225337.112" a="E"><vh>div</vh>
<v t="amd.20151123225337.113" a="E"><vh>table</vh>
<v t="amd.20151123225337.114" a="E"><vh>tr</vh>
<v t="amd.20151123225337.115"><vh>td</vh>
<v t="amd.20151123225337.116"><vh>button</vh></v>
</v>
<v t="amd.20151123225337.117"><vh>td</vh>
<v t="amd.20151123225337.118"><vh>button</vh></v>
</v>
<v t="amd.20151123225337.119"><vh>td</vh>
<v t="amd.20151123225337.120"><vh>button</vh></v>
</v>
<v t="amd.20151123225337.121" a="E"><vh>td</vh>
<v t="amd.20151123225337.122"><vh>button</vh></v>
</v>
</v>
<v t="amd.20151123225337.123" a="E"><vh>tr</vh>
<v t="amd.20151123225337.124" a="E"><vh>td</vh>
<v t="amd.20151123225337.125"><vh>button</vh></v>
</v>
<v t="amd.20151123225337.126"><vh>td</vh>
<v t="amd.20151123225337.127"><vh>button</vh></v>
</v>
<v t="amd.20151123225337.128"><vh>td</vh>
<v t="amd.20151123225337.129"><vh>button</vh></v>
</v>
</v>
<v t="amd.20151123225337.130"><vh>tr</vh>
<v t="amd.20151123225337.131"><vh>td</vh>
<v t="amd.20151123225337.132"><vh>button</vh></v>
</v>
<v t="amd.20151123225337.133"><vh>td</vh>
<v t="amd.20151123225337.134"><vh>button</vh></v>
</v>
<v t="amd.20151123225337.135"><vh>td</vh>
<v t="amd.20151123225337.136"><vh>button</vh></v>
</v>
</v>
</v>
<v t="amd.20151123225337.137"><vh>br</vh></v>
</v>
</v>
</v>
<v t="amd.20151123225337.138"><vh>div</vh>
<v t="amd.20151123225337.139"><vh>div</vh>
<v t="amd.20151123225337.140"><vh>div</vh>
<v t="amd.20151123225337.141"><vh>p</vh></v>
<v t="amd.20151123225337.142"><vh>p</vh></v>
<v t="amd.20151123225337.143"><vh>p</vh></v>
<v t="amd.20151123225337.144"><vh>p</vh></v>
<v t="amd.20151123225337.145"><vh>a</vh></v>
<v t="amd.20151123225337.146"><vh>br</vh></v>
<v t="amd.20151123225337.147"><vh>button</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="amd.20151123233750.1"><vh>div</vh></v>
<v t="amd.20151123225337.175"><vh>script</vh></v>
<v t="amd.20151123225337.176"><vh>script</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="amd.20151123225336.1">&lt;!DOCTYPE html&gt;
&lt;html style="height: 100%; min-width: 1200px;"&gt;
@others
&lt;/html&gt;</t>
<t tx="amd.20151123225336.2">&lt;head&gt;
@others
&lt;/head&gt;
</t>
<t tx="amd.20151123225336.3">&lt;meta name="viewport" content="width=device-width"&gt;
    &lt;meta http-equiv='Content-Type' content='text/html;charset=utf-8'&gt;&lt;/meta&gt;
    </t>
<t tx="amd.20151123225336.4">&lt;link rel='stylesheet' type='text/css' href='http://www.x3dom.org/x3dom/release/x3dom.css'&gt;&lt;/link&gt;
&lt;!-- #EndEditable --&gt;
</t>
<t tx="amd.20151123225336.5">&lt;link rel="stylesheet" href="2013.css" type="text/css"&gt;
&lt;link href='http://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'&gt;
	&lt;link rel='stylesheet' type='text/css' href='commonLinkageStyles.css'&gt;&lt;/link&gt;
	</t>
<t tx="amd.20151123225336.6">&lt;script src='x3dom.js'&gt;&lt;/script&gt;
	</t>
<t tx="amd.20151123225336.7">&lt;script src='jquery-1.11.1.min.js'&gt;&lt;/script&gt;
	</t>
<t tx="amd.20151123225336.8">&lt;script src='commonLinkageFunctions.js'&gt;&lt;/script&gt;
	</t>
<t tx="amd.20151123225336.9">&lt;script type='text/javascript' &gt;

		var barLength = 1;										//Declare variables and initialize most of them
		var up = 1;

		var SCALE_UP_VALUE = 2;									//Length of the crank in cm
		var ADDITIONAL_STAND_HEIGHT = 2;						//Extra space between the lowest point of the linkage and the stand base
		var ADDITIONAL_BODY_HEIGHT = 1;

		var trans = "";
		var scal = "";
		var fillerScal = 0;

		var barName = "";
		var newLength = 0;
		var numberOfLinks = 0;

		var x = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
		var y = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];

		var min = [0.0, 0.0, 0.0];
		var max = [0.0, 0.0, 0.0];

		var b = null;													//Variabes used as handles on entier DOM trees
		var baseSliderValue = null;
		//var d;
		var c = null;
		var couplerSliderValue = null;
		var f = null;
		var followerSliderValue = null;
		var theta = null;
		var thetaSliderValue = null;
		var animate = null;
		var CL = null;
		var CLSliderValue = null;
		var CP = null;
		var CPSliderValue = null;

		var sliderInterval = null;
		var checkingModel = null;

		x3dom.runtime.ready = function() {									//When the DOM is ready
			baseSliderValue = document.getElementById("baseSliderValue");	//Fetch the UI control

			couplerSliderValue = document.getElementById("couplerSliderValue");

			followerSliderValue = document.getElementById("followerSliderValue");

			thetaSliderValue = document.getElementById("thetaSliderValue");
			animate = document.getElementById("animate");

			CLSliderValue = document.getElementById("CLSliderValue");

			CPSliderValue = document.getElementById("CPSliderValue");
			
			b = document.getElementById("baseSlider");

			b.onmousedown = function() {
				sliderInterval = setInterval(function() {b.onchange()}, 10);
			}
			b.onmouseup = function() {
				window.clearInterval(sliderInterval);
			}
			b.onchange = function() {
				baseSliderValue.value = eval(b.value).toFixed(2);
				modify("base");
				geometricChange(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}

			baseSliderValue.onfocus = function() {
				inputInterval = setInterval(function() {baseSliderValue.onchange()}, 10);
			}
			baseSliderValue.onblur = function() {
				window.clearInterval(inputInterval);
			}
			baseSliderValue.onchange = function() {
				if(baseSliderValue.value &lt; 1.50)
				{
					baseSliderValue.value = 1.50;
				}
				else if(baseSliderValue.value &gt; 7.50)
				{
					baseSliderValue.value = 7.50;
				}
				b.value = baseSliderValue.value;
				modify("base");
				geometricChange(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}

			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*\
			|* d = document.getElementById("crankSlider"); *|
			\*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

			c = document.getElementById("couplerSlider");

			c.onmousedown = function() {
				sliderInterval = setInterval(function() {c.onchange()}, 10);
			}
			c.onmouseup = function() {
				window.clearInterval(sliderInterval);
			}
			c.onchange = function() {
				couplerSliderValue.value = eval(c.value).toFixed(2);
				modify("coupler");
				geometricChange(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}

			couplerSliderValue.onfocus = function() {
				inputInterval = setInterval(function() {couplerSliderValue.onchange()}, 10);
			}
			couplerSliderValue.onblur = function() {
				window.clearInterval(inputInterval);
			}
			couplerSliderValue.onchange = function() {
				if(couplerSliderValue.value &lt; 1.50)
				{
					couplerSliderValue.value = 1.50;
				}
				else if(couplerSliderValue.value &gt; 4.50)
				{
					couplerSliderValue.value = 4.50;
				}
				c.value = couplerSliderValue.value;
				modify("coupler");
				geometricChange(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}

			f = document.getElementById("followerSlider");

			f.onmousedown = function() {
				sliderInterval = setInterval(function() {f.onchange()}, 10);
			}
			f.onmouseup = function() {
				window.clearInterval(sliderInterval);
			}
			f.onchange = function() {
				followerSliderValue.value = eval(f.value).toFixed(2);
				modify("follower");
				geometricChange(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}

			followerSliderValue.onfocus = function() {
				inputInterval = setInterval(function() {followerSliderValue.onchange()}, 10);
			}
			followerSliderValue.onblur = function() {
				window.clearInterval(inputInterval);
			}
			followerSliderValue.onchange = function() {
				if(followerSliderValue.value &lt; 1.50)
				{
					followerSliderValue.value = 1.50;
				}
				else if(followerSliderValue.value &gt; 4.50)
				{
					followerSliderValue.value = 4.50;
				}
				f.value = followerSliderValue.value;
				modify("follower");
				geometricChange(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}

			CL = document.getElementById("CLSlider");

			CL.onmousedown = function() {
				sliderInterval = setInterval(function() {CL.onchange()}, 10);
			}
			CL.onmouseup = function() {
				window.clearInterval(sliderInterval);
			}
			CL.onchange = function() {
				CLSliderValue.value = eval(CL.value).toFixed(2);
				modify("coupler");
				geometricChange(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}

			CLSliderValue.onfocus = function() {
				inputInterval = setInterval(function() {CLSliderValue.onchange()}, 10);
			}
			CLSliderValue.onblur = function() {
				window.clearInterval(inputInterval);
			}
			CLSliderValue.onchange = function() {
				if(CLSliderValue.value &lt; 0.00)
				{
					CLSliderValue.value = 0.00;
				}
				else if(CLSliderValue.value &gt; 4.00)
				{
					CLSliderValue.value = 4.00;
				}
				CL.value = CLSliderValue.value;
				modify("coupler");
				geometricChange(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}

			CP = document.getElementById("CPSlider");

			CP.onmousedown = function() {
				sliderInterval = setInterval(function() {CP.onchange()}, 10);
			}
			CP.onmouseup = function() {
				window.clearInterval(sliderInterval);
			}
			CP.onchange = function() {
				CPSliderValue.value = eval(CP.value).toFixed(2);
				modify("coupler");
				checkCP(eval(CP.value));
				geometricChange(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}

			CPSliderValue.onfocus = function() {
				inputInterval = setInterval(function() {CPSliderValue.onchange()}, 10);
			}
			CPSliderValue.onblur = function() {
				window.clearInterval(inputInterval);
			}
			CPSliderValue.onchange = function() {
				if(CPSliderValue.value &lt; 0.00)
				{
					CPSliderValue.value = 0.00;
				}
				else if(CPSliderValue.value &gt; 6.00)
				{
					CPSliderValue.value = 6.00;
				}
				CP.value = CPSliderValue.value;
				modify("coupler");
				checkCP(eval(CP.value));
				geometricChange(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}
			
			theta = document.getElementById("thetaSlider");

			theta.onmousedown = function() {
				sliderInterval = setInterval(function() {theta.onchange()}, 10);
			}
			theta.onmouseup = function() {
				window.clearInterval(sliderInterval);
			}
			theta.onchange = function() {
				thetaSliderValue.value = eval(theta.value).toFixed(0);
				calcGeometry(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}

			thetaSliderValue.onfocus = function() {
				inputInterval = setInterval(function() {thetaSliderValue.onchange()}, 10);
			}
			thetaSliderValue.onblur = function() {
				window.clearInterval(inputInterval);
			}
			thetaSliderValue.onchange = function() {
				if(thetaSliderValue.value &lt; 0.00)
				{
					thetaSliderValue.value = 0.00;
				}
				else if(thetaSliderValue.value &gt; 360.00)
				{
					thetaSliderValue.value = 360.00;
				}
				theta.value = thetaSliderValue.value;
				geometricChange(eval(b.value) * SCALE_UP_VALUE, eval(c.value) * SCALE_UP_VALUE, 1 * SCALE_UP_VALUE, eval(f.value) * SCALE_UP_VALUE, (eval(theta.value) * Math.PI / 180), eval(CL.value), eval(CP.value));
			}
			
			animate.onclick = function() {						//When the theta button is pressed
				if (animate.getAttribute("src") === "play.png")
				{
					animate.setAttribute("src", "stop.png");
					thetaInterval = setInterval(function() {updateTheta(2)}, 10)
				} 
				else {					
					animate.setAttribute("src", "play.png");
					window.clearInterval(thetaInterval);
				}
			};

			document.getElementById("blackButton").onclick = function() {	//When the black button is pressed
				fullColorUpdate("Black", COLORS["BLACK"]);					//Change the whole linkage to black
			};

			document.getElementById("whiteButton").onclick = function() {	//When the white button is pressed
				fullColorUpdate("White", COLORS["WHITE"]);					//Change the whole linkage to white
			};
			
			document.getElementById("purpleButton").onclick = function() {	//When the purple button is pressed
				fullColorUpdate("Purple", COLORS["PURPLE"]);				//Change the whole linkage to purple
			};

			document.getElementById("redButton").onclick = function() {		//When the red button is pressed
				fullColorUpdate("Red", COLORS["RED"]);						//Change the whole linkage to red
			};

			document.getElementById("pinkButton").onclick = function() {	//When the pink button is pressed
				fullColorUpdate("Pink", COLORS["PINK"]);					//Change the whole linkage to pink
			};

			document.getElementById("blueButton").onclick = function() {	//When the blue button is pressed
				fullColorUpdate("Blue", COLORS["BLUE"]);					//Change the whole linkage to blue
			};

			document.getElementById("yellowButton").onclick = function() {	//When the yellow button is pressed
				fullColorUpdate("Yellow", COLORS["YELLOW"]);				//Change the whole linkage to yellow
			};

			document.getElementById("greenButton").onclick = function() {	//When the green button is pressed
				fullColorUpdate("Green", COLORS["GREEN"]);					//Change the whole linkage to green
			};

			document.getElementById("orangeButton").onclick = function() {	//When the orange button is pressed
				fullColorUpdate("Orange", COLORS["ORANGE"]);				//Change the whole linkage to orange
			};

			document.getElementById("couplerBarEndLeft").children[0].onload = function() {
				var bar = document.getElementById("coupler");
				updateColor(bar, bar.getElementsByTagName("Material")[2].getAttribute("DEF"), bar.getElementsByTagName("Material")[2].getAttribute("diffuseColor"));
			}	

			document.getElementById("couplerBarEndRight").children[0].onload = function() {
				var bar = document.getElementById("coupler");
				updateColor(bar, bar.getElementsByTagName("Material")[2].getAttribute("DEF"), bar.getElementsByTagName("Material")[2].getAttribute("diffuseColor"));
			}		

			document.getElementById("uploadModelButton").onclick = function() {
				upload("b: " + eval(b.value).toFixed(2) + " c: " + eval(c.value).toFixed(2) + " f: " + eval(f.value).toFixed(2) + " CL: " + eval(CL.value).toFixed(2) + " CP: " + eval(CP.value).toFixed(2), "Crank Rocker");
			}

			document.getElementById("someUniqueId").onmousedown = function() {
				calcBoundingBox()
				updateCenterOfRotation();
			}
			
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*\
			|* Need to fixed CL starting outside the range of the bar for some reason *|
			\*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

			init();
		}

		function init()
		{
			var initialValues = $.parseJSON(document.getElementById("initialValues").innerHTML);
			b.value = initialValues["b"];
			c.value = initialValues["c"];
			f.value = initialValues["f"];
			CL.value = initialValues["cl"];
			CP.value = initialValues["cp"];
			theta.value = initialValues["theta"];

			fullUpdate();
		}

		function fullUpdate()
		{
			b.onchange();
			c.onchange();
			f.onchange();
			CL.onchange();
			CP.onchange();
			theta.onchange();
		}

		function modify(barName)													//Modifies the given bar
		{
			slider = document.getElementById(barName + "Slider");					//Fetches the input for that bar
			sliderValue = document.getElementById(barName + "SliderValue");
			barLength = eval(slider.value);											//Gets the new length
			adjustBar(barName + "Bar", (barLength * SCALE_UP_VALUE));					//Adjusts the bar to the new length
		}

		function adjustBar(barName, barLength)																//Adjusts the given bar to the given length
		{
			bar = document.getElementById(barName);															//Fetches the given bar
			fillerScal = ((barLength - 1) % 1) / 2;															//Calculate the scale of the filler
			if(bar.id !== "couplerBar")																		//If the bar is not the coupler
			{
				if(bar.childElementCount - bar.getAttribute("permanentChildren") &lt; Math.floor(barLength - 1))	//If there is space for another link
				{
					addLink(bar, Math.floor(barLength - 1), 0, 1, 1, "Four-Bar Pieces/barPiece.x3d");							//Add the neccessary links
				}
				else if(bar.childElementCount - bar.getAttribute("permanentChildren") &gt; barLength - 1)			//If there are too many links
				{
					removeLink(bar, Math.floor(barLength - 1));													//Remove the extra links
				}
				scal = fillerScal.toString() + " 1 1";															//Set the scale variable
				trans = (((fillerScal)/100)).toString() + " 0 0";												//Set the translation of the main bar
			
				bar.setAttribute("translation", trans);
				if(fillerScal !== 0)
				{
					trans = ((Math.floor(barLength) - 0.5 + fillerScal/2) / 100).toString() + " 0 0";				//Set the scale and translation of the right filler
					document.getElementById(bar.id + "SolidRight").setAttribute("scale", scal);
					document.getElementById(bar.id + "SolidRight").setAttribute("translation", trans);
					document.getElementById(bar.id + "SolidRight").setAttribute("render", true);

					trans = ((0.5 + fillerScal/2) / 100).toString() + " 0 0";										//Set the scale and translation of the left filler
					document.getElementById(bar.id + "SolidLeft").setAttribute("scale", scal);			
					document.getElementById(bar.id + "SolidLeft").setAttribute("translation", trans);
					document.getElementById(bar.id + "SolidLeft").setAttribute("render", true);
				}
				else
				{
					document.getElementById(bar.id + "SolidRight").setAttribute("render", false);

					document.getElementById(bar.id + "SolidLeft").setAttribute("render", false);
				}

				trans = (((Math.floor(barLength)) + fillerScal)/100).toString() + " 0 0";						//Set the translation of the end of the bar
				document.getElementById(bar.id + "EndRight").setAttribute("translation", trans);
			}
			else																								//Else if the bar is the coupler
			{
				var CLValue = eval(CL.value);																								//Fetch the values of CL and CP
				var CPValue = eval(CP.value);
				var numberOfLinks = Math.floor((CLValue - 1) * (barLength) / 2) + Math.floor(barLength - ((CLValue - 1) * (barLength) / 2));	//Calculate the number of links for the coupler bar
				if(bar.childElementCount - bar.getAttribute("permanentChildren") &lt; numberOfLinks - 1)
				{
					addLink(bar, numberOfLinks - 1, 0, 1, 1, "Four-Bar Pieces/barPiece.x3d");
				}
				else if(bar.childElementCount - bar.getAttribute("permanentChildren") &gt; numberOfLinks - 1)
				{
					removeLink(bar, numberOfLinks - 1);
				}
				var leftFillerScal = ((((CLValue - 1) * (barLength) / 2) % 1) + 1) % 1;																//Calculate the scale of the lefthand filler
				var rightFillerScal = (((barLength - ((CLValue - 1) * (barLength) / 2)) % 1) + 1) % 1;

				trans = (((leftFillerScal)/100)).toString() + " 0 0";
				bar.setAttribute("translation", trans);

				if(rightFillerScal !== 0)
				{
					scal = rightFillerScal.toString() + " 1 1";	
					trans = (((numberOfLinks) - 0.5 + rightFillerScal / 2) / 100).toString() + " 0 0";;													//Set the scale and translation of the right filler
					document.getElementById(bar.id + "SolidRight").setAttribute("scale", scal);			
					document.getElementById(bar.id + "SolidRight").setAttribute("translation", trans);
					document.getElementById(bar.id + "SolidRight").setAttribute("render", true);
				}
				else
				{
					document.getElementById(bar.id + "SolidRight").setAttribute("render", false);
				}

				if(leftFillerScal !== 0)
				{
					scal = leftFillerScal.toString() + " 1 1";	
					trans = ((0.5 + leftFillerScal/2) / 100).toString() + " 0 0";																		//Set the scale and translation of the left filler
					document.getElementById(bar.id + "SolidLeft").setAttribute("scale", scal);
					document.getElementById(bar.id + "SolidLeft").setAttribute("translation", trans);
					document.getElementById(bar.id + "SolidLeft").setAttribute("render", true);
				}
				else
				{
					document.getElementById(bar.id + "SolidLeft").setAttribute("render", false);
				}

				trans = ((barLength - leftFillerScal) / 100).toString() + " 0 0.005";
				//trans = ((numberOfLinks + rightFillerScal - 0.5)/100).toString() + " 0 0.005";														//Set the translation of the right brace
				document.getElementById("couplerBarBraceRight").setAttribute("translation", trans);

				trans = ((numberOfLinks + rightFillerScal)/100).toString() + " 0 0";																//Set the translation of the end of the bar
				document.getElementById(bar.id + "EndRight").setAttribute("translation", trans);

				adjustCouplerPoint(barLength, (CLValue - 1) * (barLength) / 2, (CPValue - 3) * -1.5 * SCALE_UP_VALUE);								//Adjust the coupler point and attaching bar/braces
			}
		}

		function extendCouplerBar(size, side, pos, dir)
		{
			var extEnd = document.getElementById("couplerBarExtEnd" + side);
			var extSpacer = document.getElementById("couplerBarExtSpacer" + side);

			if(size !== 0)
			{
				if(extSpacer.getAttribute("render") !== "true")
				{
					extSpacer.setAttribute("render", "true");
				}
				trans = "" + (dir * (size / 2 + 0.5) / 100).toString() + " 0 0";
				scal = "" + size.toString() + " 1 1";
				extSpacer.setAttribute("translation", trans);
				extSpacer.setAttribute("scale", scal);
			}
			else if(extSpacer.getAttribute("render") !== "false")
			{
				extSpacer.setAttribute("render", "false");
			}
			
			trans = ((pos + (dir * 0.5)) / 100).toString() + " 0 0";
			extEnd.setAttribute("translation", trans);

			if(extEnd.childElementCount - extEnd.getAttribute("permanentChildren") &lt; Math.floor(Math.abs(pos)))
			{
				addLink(extEnd, Math.floor(Math.abs(pos)), 0, -1, 0.5, "Four-Bar Pieces/barPiece.x3d");
			}
			else if(extEnd.childElementCount - extEnd.getAttribute("permanentChildren") &gt; Math.floor(Math.abs(pos)))
			{
				removeLink(extEnd, Math.floor(Math.abs(pos)));
			}
		}

		function adjustCouplerPoint(couplerLength, xPos, yPos)
		{
			var couplerPointBar = document.getElementById("couplerPointBar");			//Fetches important elements
			var couplerPost = document.getElementById("couplerBarPost");				
			var couplerBraceRight = document.getElementById("couplerBarBraceRight");	
			var couplerBraceLeft = document.getElementById("couplerBarBraceLeft");	
			var bracing = document.getElementById("couplerBarBracing");
			
			var holeRight = document.getElementById("couplerBarEndRight").children[0];
			var holeLeft = document.getElementById("couplerBarEndLeft").children[0];

			var extSpacerRight = document.getElementById("couplerBarExtSpacerRight");
			var extEndRight = document.getElementById("couplerBarExtEndRight");
			var extSpacerLeft = document.getElementById("couplerBarExtSpacerLeft");
			var extEndLeft = document.getElementById("couplerBarExtEndLeft");

			var couplerPointSpacer = document.getElementById("couplerPointSolid");

			if (xPos &lt; 0.5)
			{
				if(holeLeft.getAttribute("url") !== "Four-Bar Pieces/squareHoleTall.x3d")
				{
					holeLeft.setAttribute("url", "Four-Bar Pieces/squareHoleTall.x3d");
					extEndLeft.setAttribute("render", "true");
				}
				if(holeRight.getAttribute("url") !== "Four-Bar Pieces/circularHoleTall.x3d")
				{
					holeRight.setAttribute("url", "Four-Bar Pieces/circularHoleTall.x3d");
					extEndRight.setAttribute("render", "false");
					extSpacerRight.setAttribute("render", "false");
				}

				if(xPos &lt; 0)
				{
					extendCouplerBar(-((xPos) % 1), "Left", xPos, -1);
				}
				else
				{
					if(extSpacerLeft.getAttribute("render") !== "false")
					{
						extSpacerLeft.setAttribute("render", "false");

						extEndLeft.setAttribute("translation", "-0.005 0 0");
					}
				}
			}
			else if (xPos &gt; (couplerLength - 0.5))
			{
				if(holeLeft.getAttribute("url") !== "Four-Bar Pieces/circularHoleTall.x3d")
				{
					holeLeft.setAttribute("url", "Four-Bar Pieces/circularHoleTall.x3d");
					extEndLeft.setAttribute("render", "false");
					extSpacerLeft.setAttribute("render", "false");
				}
				if(holeRight.getAttribute("url") !== "Four-Bar Pieces/squareHoleTall.x3d")
				{
					holeRight.setAttribute("url", "Four-Bar Pieces/squareHoleTall.x3d");
					extEndRight.setAttribute("render", "true");
					extSpacerRight.setAttribute("render", "true");
				}

				if(xPos &gt; couplerLength)
				{
					extendCouplerBar((xPos - couplerLength) % 1, "Right", xPos - couplerLength, 1);
				}
				else
				{
					if(extSpacerRight.getAttribute("render") !== "false")
					{
						extSpacerRight.setAttribute("render", "false");

						extEndRight.setAttribute("translation", "0.005 0 0");
					}
				}
			}
			else
			{
				if(holeLeft.getAttribute("url") !== "Four-Bar Pieces/circularHoleTall.x3d")
				{
					holeLeft.setAttribute("url", "Four-Bar Pieces/circularHoleTall.x3d");
					extEndLeft.setAttribute("render", "false");
					extSpacerLeft.setAttribute("render", "false");
				}
				if(holeRight.getAttribute("url") !== "Four-Bar Pieces/circularHoleTall.x3d")
				{
					holeRight.setAttribute("url", "Four-Bar Pieces/circularHoleTall.x3d");
					extEndRight.setAttribute("render", "false");
					extSpacerRight.setAttribute("render", "false");
				}
			}

			trans = "" + ((xPos)/100).toString() + " 0 " + (yPos/100).toString();		//Sets the couplerPost's position (where the knob is, aka the coupler point)
			couplerPost.setAttribute("translation", trans);
			trans = "" + ((xPos)/100).toString() + " 0 0";								//Sets the base position of the perpendicular bar out to the coupler point
			couplerPointBar.setAttribute("translation", trans);
			
			if(yPos &lt; 0)
			{
				yPos *= -1;
				couplerPointBar.setAttribute("rotation", "0 1 0 " + (Math.PI * 1 / 2).toString());
				couplerPost.setAttribute("rotation", "0 1 0 " + (Math.PI).toString());
				bracing.setAttribute("rotation", "0 0 1 " + (Math.PI).toString());
			}
			else
			{
				couplerPointBar.setAttribute("rotation", "0 1 0 " + (Math.PI * 3 / 2).toString());	
				couplerPost.setAttribute("rotation", "0 1 0 0");
				bracing.setAttribute("rotation", "0 0 1 0");
			}

			var scalX = (xPos - 0.5);													//Sets the x and y scaling for the coupler bar bracing
			var scalY = (yPos - 0.5);
			if(scalX &gt; 1 &amp;&amp; scalY &gt; 1)													//If the bracing is thick enough 
			{
				if(scalX &gt; scalY)
				{
					scalX = scalY;
				}
				trans = "" + ((-scalX - 0.5) / 100).toString() + " 0 0.005";		//Set the neccessary transform
				scal = "" + scalX.toString() + " 1 " + scalY.toString();
				couplerBraceLeft.setAttribute("scale", scal);
				couplerBraceLeft.setAttribute("translation", trans);
				couplerBraceLeft.setAttribute("render", "true");
			}
			else
			{
				couplerBraceLeft.setAttribute("render", "false");						//Else don't render it
			}

			scalX = (couplerLength - xPos - 0.5);										//Repeat above for the other brace
			scalY = (yPos - 0.5);
			if(scalX &gt; 1 &amp;&amp; scalY &gt; 1)
			{
				if(scalX &gt; scalY)
				{
					scalX = scalY;
				}
				trans = "" + ((scalX + 0.5) / 100).toString() + " 0 0.005";
				scal = "" + scalX.toString() + " 1 " + scalY.toString();
				couplerBraceRight.setAttribute("scale", scal);
				couplerBraceRight.setAttribute("translation", trans);
				
				if(couplerBraceRight.getAttribute("render") !== "true")
				{
					couplerBraceRight.setAttribute("render", "true");
				}
			}
			else if (couplerBraceRight.getAttribute("render") !== "false")
			{
				couplerBraceRight.setAttribute("render", "false");
			}

			var children = (couplerPointBar.childElementCount - couplerPointBar.getAttribute("permanentChildren"));		//check how many children links are present
			if(children + 1 &lt; Math.floor(Math.abs(yPos)))																//If there is space for another link or more
			{
				addLink(couplerPointBar, Math.floor(Math.abs(yPos) - 1), Math.PI/2, 1, 1, "Four-Bar Pieces/barPiece.x3d");								//Add the neccessary links
			}
			else if(children &gt; Math.abs(yPos - 1))																		//If there are too many links
			{
				removeLink(couplerPointBar, Math.floor(yPos - 1));														//Remove the extra links
			}

			if(yPos &lt; 1)																								//If the coupler point is intersecting the bar
			{
				if(couplerPointSpacer.getAttribute("render") !== "false")
				{
					couplerPointSpacer.setAttribute("render", "false");													//Filler is not required
				}
			}
			else
			{
				fillerScal = (Math.abs(yPos - 1)) % 1;																	//Calculate the required filler
				if(fillerScal !== 0)
				{
					if(couplerPointSpacer.getAttribute("render") !== "true")
					{
						couplerPointSpacer.setAttribute("render", "true");
					}
					scal = fillerScal.toString() + " 1 1";																//Set the scale and position of the filler
					trans = "" + ((yPos - 0.5 - (fillerScal/2))/100).toString() + " 0 0";

					couplerPointSpacer.setAttribute("scale", scal);
					couplerPointSpacer.setAttribute("translation", trans);			
				}
				else if(couplerPointSpacer.getAttribute("render") !== "false")
				{
						couplerPointSpacer.setAttribute("render", "false");
				}
			}
			
		}

		function geometricChange(b, c, d, f, theta, CL, CP)
		{
			calcGeometry(b, c, d, f, theta);
			var minY = cyclePoints(b, c, d, f, CL, CP);
			adjustBase(b, minY);
		}
	
		function calcGeometry(b, c, d, f, theta)											//Calculates the geometry of the four bar linkage
		{
			point0(b, c, d, f, theta);														//Calculate the four points
			point1(b, c, d, f, theta);
			point2(b, c, d, f, theta);
			point3(b, c, d, f, theta);
			
			updateGeometry();
		}

		function updateGeometry()															//Updates the physical representation of the linkage
		{
			var angle = 0;																//Initialize variables
			var rot = 0;
			var trans = 0;
			var angle = 0;
			var trans = 0;
			var rot = 0;
			var angle = 0;
			var trans = 0;
			var rot = 0;

			angle = Math.atan((y[1]-y[0])/(x[1]-x[0]));								//Calculate the angle of the crank from the horizontal
			if(x[1] &lt; x[0])
				angle += Math.PI;
			rot = "0,1,0," + angle.toString();
			trans = "" + (x[0]/100).toString() + ",0.0055," + (-y[0]/100).toString();
			
			document.getElementById("crank").setAttribute("rotation", rot);
			document.getElementById("crank").setAttribute("translation", trans);

			angle = Math.atan((y[2]-y[1])/(x[2]-x[1]));								//Calculate the angle of the coupler from the horizontal
			if(x[2] &lt; x[1])
				angle += Math.PI;
			rot = "0,1,0," + angle.toString();
			trans = "" + (x[1]/100).toString() + ",0.016," + (-y[1]/100).toString();	//Calculate the position of the coupler
			
			document.getElementById("coupler").setAttribute("rotation", rot);
			document.getElementById("coupler").setAttribute("translation", trans);

			angle = Math.atan((y[3]-y[2])/(x[3]-x[2]));								//Calculated the angle of the follower from the base horizontal
			if(x[2] &lt;= x[3])
				angle += Math.PI;
			rot = "0,1,0," + angle.toString();
			trans = "" + (x[3]/100).toString() + ",0.0055," + (y[3]/100).toString();	//Calculated the position of the follower

			document.getElementById("follower").setAttribute("rotation", rot);
			document.getElementById("follower").setAttribute("translation", trans);

			calcBoundingBox();
		}

		function cyclePoints(b, c, d, f, CL, CP)
		{
			var minY = -2.0;
			var minTheta = 270.0;
			for(var i = 0; i &lt; 360; i += 5)
			{
				var theta = i * Math.PI / 180;
				point1(b, c, d, f, theta);
				point2(b, c, d, f, theta);
				pointCL(b, c, d, f, theta, CL);												//Calculate the point where the coupler-line attaches
				pointCP(b, c, d, f, theta, CL, CP);											//Calculate the location of the coupler-point
				if(y[4] &lt; minY)
				{
					minY = y[4];
					minTheta = i;
				}
				if(y[5] &lt; minY)
				{
					minY = y[5];
					minTheta = i;
				}
				if(i % 10 === 0)
				{
					//Draw a line to create a dashed line
				}
			}

			for(var i = minTheta - 5; i &lt; minTheta + 5; i ++)
			{
				var theta = ((i + 360) % 360) * Math.PI / 180;
				point1(b, c, d, f, theta);
				point2(b, c, d, f, theta);
				pointCL(b, c, d, f, theta, CL);												//Calculate the point where the coupler-line attaches
				pointCP(b, c, d, f, theta, CL, CP);											//Calculate the location of the coupler-point
				if(y[4] - 0.5 &lt; minY)
				{
					minY = y[4] - 0.5;
					minTheta = i;
				}
				if(y[5] &lt; minY)
				{
					minY = y[5];
					minTheta = i;
				}
			}
			return minY;
		}

		function point0(b, c, d, f, theta)	//Calculates the coordinates of point 0 (where the crank and base meet)
		{
			x[0] = 0.0;
			y[0] = 0.0;
		}

		function point1(b, c, d, f, theta)	//Calculates the coordinates of point 1 (where the crank and coupler meet)
		{
			x[1] = Math.cos(theta)*d;
			y[1] = Math.sin(theta)*d;
		}
	
		function point2(b, c, d, f, theta)	//Calculates the coordinates of point 2 (where the coupler and follower meet)
		{
			x[2] = ((Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*(Math.pow(b,2.0)+Math.pow(c,2.0)+Math.pow(d,2.0)+(Math.pow(f,2.0)*(-1.0))+(Math.cos((theta))*d*b*(-2.0)))*(b+(Math.cos((theta))*d*(-1.0)))*0.5)+(Math.sin((theta))*Math.pow(((c*(-1.0))+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+(f*(-1.0))+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+f+(Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)*(-1.0))),0.5)*Math.pow((c+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*d*0.5)+(Math.cos((theta))*d));
			y[2] = ((Math.pow(((c*(-1.0))+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+(f*(-1.0))+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+f+(Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)*(-1.0))),0.5)*Math.pow((c+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*(b+(Math.cos((theta))*d*(-1.0)))*0.5)+(Math.sin((theta))*d)+(Math.sin((theta))*Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*(Math.pow(b,2.0)+Math.pow(c,2.0)+Math.pow(d,2.0)+(Math.pow(f,2.0)*(-1.0))+(Math.cos((theta))*d*b*(-2.0)))*d*-0.5));
		}

		function point3(b, c, d, f, theta)	//Calculates the coordinates of point 3 (where the base and follower meet)
		{
			x[3] = b;
			y[3] = 0.0;
		}

		function pointCL(b, c, d, f, theta, CL)
		{
			x[4]=((((Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*(Math.pow(b,2.0)+Math.pow(c,2.0)+Math.pow(d,2.0)+(Math.pow(f,2.0)*(-1.0))+(Math.cos((theta))*d*b*(-2.0)))*(b+(Math.cos((theta))*d*(-1.0)))*0.5)+(Math.sin((theta))*Math.pow(((c*(-1.0))+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+(f*(-1.0))+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+f+(Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)*(-1.0))),0.5)*Math.pow((c+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*d*0.5)+(Math.cos((theta))*d))*(-1.0))+(Math.cos((theta))*d*2.0)+(Math.abs((1.0+CL))*((Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*(Math.pow(b,2.0)+Math.pow(c,2.0)+Math.pow(d,2.0)+(Math.pow(f,2.0)*(-1.0))+(Math.cos((theta))*d*b*(-2.0)))*(b+(Math.cos((theta))*d*(-1.0)))*0.5)+(Math.sin((theta))*Math.pow(((c*(-1.0))+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+(f*(-1.0))+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+f+(Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)*(-1.0))),0.5)*Math.pow((c+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*d*0.5))*0.5));
    		y[4]=((((Math.pow(((c*(-1.0))+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+(f*(-1.0))+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+f+(Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)*(-1.0))),0.5)*Math.pow((c+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*(b+(Math.cos((theta))*d*(-1.0)))*0.5)+(Math.sin((theta))*d)+(Math.sin((theta))*Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*(Math.pow(b,2.0)+Math.pow(c,2.0)+Math.pow(d,2.0)+(Math.pow(f,2.0)*(-1.0))+(Math.cos((theta))*d*b*(-2.0)))*d*-0.5))*(-1.0))+(Math.sin((theta))*d*2.0)+(Math.abs((1.0+CL))*((((Math.pow(((c*(-1.0))+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+(f*(-1.0))+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((c+f+(Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)*(-1.0))),0.5)*Math.pow((c+f+Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),0.5)),0.5)*Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*(b+(Math.cos((theta))*d*(-1.0)))*0.5)+(Math.sin((theta))*d)+(Math.sin((theta))*Math.pow((Math.pow(b,2.0)+Math.pow(d,2.0)+(Math.cos((theta))*d*b*(-2.0))),(-1.0))*(Math.pow(b,2.0)+Math.pow(c,2.0)+Math.pow(d,2.0)+(Math.pow(f,2.0)*(-1.0))+(Math.cos((theta))*d*b*(-2.0)))*d*-0.5))*(-1.0))+(Math.sin((theta))*d))*-0.5));
    	}

		function pointCP(b, c, d, f, theta, CL, CP)
		{
			var ang = Math.atan((y[2] - y[1]) / (x[2] - x[1]));
			x[5] = x[4] - Math.cos((Math.PI / 2) - ang) * ((CP - 3) * 1.5 * SCALE_UP_VALUE);
			y[5] = y[4] + Math.sin((Math.PI / 2) - ang) * ((CP - 3) * 1.5 * SCALE_UP_VALUE);
		}
	&lt;/script&gt;
&lt;!-- #EndEditable --&gt;
</t>
<t tx="amd.20151123225337.1">&lt;body style = "height: 100%;"&gt;
@others
&lt;/body&gt;
&lt;!-- #EndTemplate --&gt;
</t>
<t tx="amd.20151123225337.100">
&lt;tr&gt;
@others
&lt;/tr&gt;
</t>
<t tx="amd.20151123225337.101">
&lt;td class ="sliderTitle" colspan="3"&gt;Rotation of the Crank (theta)&lt;/td&gt;
</t>
<t tx="amd.20151123225337.102">&lt;tr&gt;
@others
&lt;/tr&gt;
				</t>
<t tx="amd.20151123225337.103">
&lt;td colspan = "3"&gt;
@others
&lt;/td&gt;
</t>
<t tx="amd.20151123225337.104">&lt;input class = "slider" id="thetaSlider" type="range" style="width:100%" min="0.00" max="360.00" step="1.00" value="180.00"/&gt;</t>
<t tx="amd.20151123225337.105">&lt;tr&gt;
@others
&lt;/tr&gt;
			</t>
<t tx="amd.20151123225337.106">
&lt;td class="InputLowerLimit"&gt;0.00&lt;/td&gt;
</t>
<t tx="amd.20151123225337.107">&lt;td class="InputCurrentValue"&gt;
@others
&lt;/td&gt;
					</t>
<t tx="amd.20151123225337.108">&lt;input class = "numericInput" id="thetaSliderValue" type="number" step="1.00" value = "180.00"/&gt; </t>
<t tx="amd.20151123225337.109">&lt;td class="InputUpperLimit"&gt;360.00&lt;/td&gt;
				</t>
<t tx="amd.20151123225337.110">&lt;br/&gt;
		</t>
<t tx="amd.20151123225337.111">&lt;div id = "colorButtons"&gt;
@others
&lt;/div&gt;
	</t>
<t tx="amd.20151123225337.112">
&lt;div&gt;
@others
&lt;/div&gt;
</t>
<t tx="amd.20151123225337.113">
&lt;table&gt;
@others
&lt;/table&gt;</t>
<t tx="amd.20151123225337.114">
&lt;tr&gt;
@others
&lt;/tr&gt;
</t>
<t tx="amd.20151123225337.115">
&lt;td class="colorButton"&gt;
@others
&lt;/td&gt;
</t>
<t tx="amd.20151123225337.116">&lt;button id="blackButton" type="button"&gt;Black&lt;/button&gt; </t>
<t tx="amd.20151123225337.117">&lt;td class="colorButton"&gt;
@others
&lt;/td&gt;
						</t>
<t tx="amd.20151123225337.118">&lt;button id="whiteButton" type="button"&gt;White&lt;/button&gt; </t>
<t tx="amd.20151123225337.119">&lt;td class="colorButton"&gt;
@others
&lt;/td&gt;	
						</t>
<t tx="amd.20151123225337.120">&lt;button id="blueButton" type="button"&gt;Blue&lt;/button&gt; </t>
<t tx="amd.20151123225337.121">&lt;td id = "uploadButton" rowspan="3"&gt;
@others
&lt;/td&gt;
					</t>
<t tx="amd.20151123225337.122">&lt;button id="uploadModelButton" type="button"&gt;Upload Model&lt;/button&gt; </t>
<t tx="amd.20151123225337.123">&lt;tr&gt;
@others
&lt;/tr&gt;
					</t>
<t tx="amd.20151123225337.124">
&lt;td class="colorButton"&gt;
@others
&lt;/td&gt;
</t>
<t tx="amd.20151123225337.125">&lt;button id="yellowButton" type="button"&gt;Yellow&lt;/button&gt; </t>
<t tx="amd.20151123225337.126">&lt;td class="colorButton"&gt;
@others
&lt;/td&gt;
						</t>
<t tx="amd.20151123225337.127">&lt;button id="greenButton" type="button"&gt;Green&lt;/button&gt; </t>
<t tx="amd.20151123225337.128">&lt;td class="colorButton"&gt;
@others
&lt;/td&gt;
					</t>
<t tx="amd.20151123225337.129">&lt;button id="orangeButton" type="button"&gt;Orange&lt;/button&gt; </t>
<t tx="amd.20151123225337.130">&lt;tr&gt;
@others
&lt;/tr&gt;
				</t>
<t tx="amd.20151123225337.131">
&lt;td class="colorButton"&gt;
@others
&lt;/td&gt;
</t>
<t tx="amd.20151123225337.132">&lt;button id="purpleButton" type="button"&gt;Purple&lt;/button&gt; </t>
<t tx="amd.20151123225337.133">&lt;td class="colorButton"&gt;
@others
&lt;/td&gt;
						</t>
<t tx="amd.20151123225337.134">&lt;button id="redButton" type="button"&gt;Red&lt;/button&gt; </t>
<t tx="amd.20151123225337.135">&lt;td class="colorButton"&gt;
@others
&lt;/td&gt;
					</t>
<t tx="amd.20151123225337.136">&lt;button id="pinkButton" type="button"&gt;Pink&lt;/button&gt; </t>
<t tx="amd.20151123225337.137">&lt;br/&gt;
			</t>
<t tx="amd.20151123225337.138">&lt;div id = "overlay"&gt;
@others
&lt;/div&gt;
   </t>
<t tx="amd.20151123225337.139">
&lt;div id = "overlayBackground"&gt;
@others
&lt;/div&gt;
</t>
<t tx="amd.20151123225337.140">
&lt;div id = "overlayText"&gt;
@others
&lt;/div&gt;
</t>
<t tx="amd.20151123225337.141">
&lt;p&gt;Please wait&lt;/p&gt;
</t>
<t tx="amd.20151123225337.142">&lt;p&gt; &lt;/p&gt;
				</t>
<t tx="amd.20151123225337.143">&lt;p&gt;Uploading your model to Shapeways&lt;/p&gt;
				</t>
<t tx="amd.20151123225337.144">&lt;p&gt;. . . . .&lt;/p&gt;
				</t>
<t tx="amd.20151123225337.145">&lt;a id = "goToModel" style = "visibility: hidden" target = "_blank" href = ""&gt;View Model on Shapeways&lt;/a&gt;
				</t>
<t tx="amd.20151123225337.146">&lt;br/&gt;
				</t>
<t tx="amd.20151123225337.147">&lt;button id = "backToEditing" onclick = "goBackToEditing()"&gt;Cancel Upload&lt;/button&gt;
			</t>
<t tx="amd.20151123225337.175">&lt;script src="http://static.getclicky.com/js" type="text/javascript"&gt;&lt;/script&gt;
</t>
<t tx="amd.20151123225337.176">&lt;script type="text/javascript"&gt;clicky.init(66352527);&lt;/script&gt;

</t>
<t tx="amd.20151123225337.2">&lt;header id="site"&gt;

		</t>
<t tx="amd.20151123225337.22">&lt;div class="main-section"&gt;
@others
&lt;/div&gt;
  </t>
<t tx="amd.20151123225337.28">&lt;div class="sub-section"&gt;
@others
&lt;/div&gt;
  </t>
<t tx="amd.20151123225337.29">
&lt;div class="inner-content"&gt;
@others
&lt;/div&gt;
</t>
<t tx="amd.20151123225337.30">
&lt;div id = "leftColumn"&gt;
@others
&lt;/div&gt;
</t>
<t tx="amd.20151123225337.31">
&lt;input id="animate" type="image" src = "play.png"/&gt;
&lt;x3d id='someUniqueId' showStat='false' showLog='false' x='0px' y='0px' width='600px' height='600px' &gt;
  &lt;scene&gt;
    &lt;navigationInfo avatarSize='0.25 1.75 0.75'
    				type='"EXAMINE" "ANY"'&gt;
    &lt;/navigationInfo&gt;
    &lt;background DEF='WO_World'
    			groundColor='0.8 0.8 0.8'
    			skyColor='0.8 0.8 0.8'&gt;
    &lt;/background&gt;

	&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
	&lt;Transform id = "x3dRender" rotation = "1 0 0 1.570796326795"&gt;
		&lt;Transform id = "base"&gt;
			&lt;Transform id = "baseBarEndLeft"&gt;						          
				&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/baseSquarePostShort.x3d"&gt;&lt;/Inline&gt;
			&lt;/Transform&gt;
			&lt;Transform id = "baseBarSolidLeft" scale = "0 1 1"&gt;
				&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/spacer.x3d"&gt;&lt;/Inline&gt;
			&lt;/Transform&gt;
			&lt;Transform id = "baseBar" permanentChildren = "2"&gt;
				&lt;Transform id = "baseBarPiece" translation = "0.01 0 0"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/barPiece.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
				&lt;Transform id = "baseBarSolidRight" scale = "0 1 1"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/spacer.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
				&lt;Transform id = "baseBarEndRight" translation = "0.02 0 0" rotation = "0 1 0 3.14159265358979323"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/baseSquarePostShort.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
			&lt;/Transform&gt;
		&lt;/Transform&gt;

		&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
		&lt;Transform id = "crank" translation = "0 0.0055 0" rotation = "0 1 0 1.570796326795"&gt;
			&lt;Transform id = "crankBarEndLeft"&gt;
				&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/leftHoleShort.x3d"&gt;&lt;/Inline&gt;
			&lt;/Transform&gt;
			&lt;Transform id = "crankBar" permanentChildren = "1"&gt;
				&lt;Transform id = "crankBarPiece" translation = "0.01 0 0"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/barPiece.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
				&lt;Transform id = "crankBarEndRight" translation = "0.02 0 0"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/rightDoublePost.x3d"&gt;&lt;/Inline&gt;	
					&lt;Transform id = "crankBarKnob" translation = "0 0.01375 0"&gt;
						&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/knob5mm.x3d"&gt;&lt;/Inline&gt;
					&lt;/Transform&gt;
				&lt;/Transform&gt;
			&lt;/Transform&gt;	
		&lt;/Transform&gt;	

		&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
		&lt;Transform id = "coupler" translation = "0 0.016 -0.02"&gt;
			&lt;Transform id = "couplerBarEndLeft"&gt;
				&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/circularHoleTall.x3d"&gt;&lt;/Inline&gt;
				&lt;Transform id = "couplerBarExtEndLeft" translation = "-0.005 0 0" rotation = "0 1 0 3.14159265358979323" render = "false" permanentChildren = "1"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/halfCircle.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
				&lt;Transform id =  "couplerBarExtSpacerLeft" translation = "-0.005 0 0" scale = "0 1 1" render = "false"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/spacer.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
			&lt;/Transform&gt;
			&lt;Transform id = "couplerBarSolidLeft" scale = "0 1 1"&gt;
				&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/spacer.x3d"&gt;&lt;/Inline&gt;
			&lt;/Transform&gt;
			&lt;Transform id = "couplerBar" permanentChildren = "2"&gt;
				&lt;Transform id = "couplerBarPiece" translation = "0.01 0 0"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/barPiece.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
				&lt;Transform id = "couplerBarSolidRight" scale = "0 1 1"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/spacer.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
				&lt;Transform id = "couplerBarEndRight" translation = "0.02 0 0" rotation = "0 1 0 3.14159265358979323"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/circularHoleTall.x3d"&gt;&lt;/Inline&gt;
					&lt;Transform rotation = "0 1 0 -3.14159265358979323"&gt;
						&lt;Transform id = "couplerBarExtEndRight" translation = "0.005 0 0" render = "false" permanentChildren = "1"&gt;
							&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/halfCircle.x3d"&gt;&lt;/Inline&gt;
						&lt;/Transform&gt;
						&lt;Transform id = "couplerBarExtSpacerRight" translation = "0.005 0 0" scale = "0 1 1" render = "false"&gt;
							&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/spacer.x3d"&gt;&lt;/Inline&gt;
						&lt;/Transform&gt;
					&lt;/Transform&gt;
				&lt;/Transform&gt;
			&lt;/Transform&gt;	
			&lt;Transform id = "couplerBarPost" translation = "0.01 0 0.01"&gt;
				&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/knobPostSouth.x3d"&gt;&lt;/Inline&gt;
				&lt;Transform id = "couplerBarKnob" translation = "0 0.00175 0"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/knob5mm.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
			&lt;/Transform&gt;
			&lt;Transform id = "couplerPointBar" permanentChildren = "2" translation = "0.01 0 0" rotation = "0 1 0 -1.570796326795"&gt;
				&lt;Transform id = "couplerPointSolid" translation = "0.005 0 0" scale = "0 1 1"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/spacer.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
				&lt;Transform rotation = "0 1 0 1.570796326795"&gt;
					&lt;Transform id = "couplerBarBracing" rotation = "1 0 0 0"&gt;
						&lt;Transform id = "couplerBarBraceLeft" translation = "0 0 0" scale = "0 1 0"&gt;
							&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/braceBottomLeft.x3d"&gt;&lt;/Inline&gt;
						&lt;/Transform&gt;
						&lt;Transform id = "couplerBarBraceRight" translation = "0 0 0" scale = "0 1 0"&gt;
							&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/braceBottomRight.x3d"&gt;&lt;/Inline&gt;
						&lt;/Transform&gt;
					&lt;/Transform&gt;
				&lt;/Transform&gt;
			&lt;/Transform&gt;
		&lt;/Transform&gt;	

		&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
		&lt;Transform id = "follower" translation = "0.02 0.0055 0" &gt;
			&lt;Transform id = "followerBarEndLeft"&gt;
				&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/leftHoleShort.x3d"&gt;&lt;/Inline&gt;
			&lt;/Transform&gt;
			&lt;Transform id = "followerBarSolidLeft" scale = "0 1 1"&gt;
				&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/spacer.x3d"&gt;&lt;/Inline&gt;
			&lt;/Transform&gt;
			&lt;Transform id = "followerBar" permanentChildren = "2"&gt;
				&lt;Transform id = "followerBarPiece" translation = "0.01 0 0"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/barPiece.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
				&lt;Transform id = "followerBarSolidRight" scale = "0 1 1"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/spacer.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
				&lt;Transform id = "followerBarEndRight" translation = "0.02 0 0"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/rightPostTall.x3d"&gt;&lt;/Inline&gt;	
				&lt;/Transform&gt;
			&lt;/Transform&gt;	
		&lt;/Transform&gt;			

		&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - --&gt;	
		&lt;Transform id = "stand" rotation = "0 1 0 3.14159265358979323"&gt;
			&lt;Transform translation = "0 -0.00125 -0.005"&gt;
				&lt;Transform id = "standHeight" scale = "2 1 1"&gt;
					&lt;Transform id = "leftPost" translation = "0.0025 0.0 0.0"&gt;
						&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standPost.x3d"&gt;&lt;/Inline&gt;
					&lt;/Transform&gt;
					&lt;Transform id = "rightPost" translation = "-0.0425 0.0 0.0"&gt;
						&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standPost.x3d"&gt;&lt;/Inline&gt;
					&lt;/Transform&gt;
				&lt;/Transform&gt;
				&lt;Transform id = "latice" translation = "-0.02 0.0 -0.046"&gt;

					&lt;Transform id = "standCrossbar" translation = "0.0 0.0 0.001" scale = "8.5 1 1"&gt;
						&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standCrossbar.x3d"&gt;&lt;/Inline&gt;
					&lt;/Transform&gt;
					&lt;Transform id = "standLaticeBrace" translation = "0.0 0.0 0.001" scale = "8.5 1 1" rotation = "0 0 1 1.570796327"&gt;
						&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standCrossbar.x3d"&gt;&lt;/Inline&gt;
					&lt;/Transform&gt;

					&lt;Transform id = "quad1" translation = "0.0 -0.0025 0.0" rotation = "0 0 1 3.14159265358979323"&gt;
						&lt;Transform id = "quad1HalfCircles" translation = "0.0325 0.0 0.0"&gt;
							&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
							&lt;Transform translation = "-0.02 0.0 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
							&lt;/Transform&gt;
							&lt;Transform translation = "-0.01 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "-0.01 0.01 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
							&lt;Transform id = "quad1HalfCircles1" translation = "-0.03 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "0.0 0.02 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
								&lt;Transform id = "quad1HalfCircles2" translation = "-0.01 -0.01 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
									&lt;Transform translation = "0.0 0.02 0.0"&gt;
										&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
									&lt;/Transform&gt;
									&lt;Transform id = "quad1HalfCircles3" translation = "-0.01 0.01 0.0"&gt;
										&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
										&lt;Transform translation = "0.0 0.02 0.0"&gt;
											&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
										&lt;/Transform&gt;
										&lt;Transform id = "quad1HalfCircles4" translation = "-0.01 -0.01 0.0"&gt;
											&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
											&lt;Transform translation = "0.0 0.02 0.0"&gt;
												&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
											&lt;/Transform&gt;
										&lt;/Transform&gt;
									&lt;/Transform&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
						&lt;/Transform&gt;
					&lt;/Transform&gt;

					&lt;Transform id = "quad2" translation = "0.0 -0.0025 0.0" rotation = "1 0 0 3.14159265358979323"&gt;
						&lt;Transform id = "quad2HalfCircles" translation = "0.0325 0.0 0.0"&gt;
							&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
							&lt;Transform translation = "-0.02 0.0 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
							&lt;/Transform&gt;
							&lt;Transform translation = "-0.01 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "-0.01 0.01 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
							&lt;Transform id = "quad2HalfCircles1" translation = "-0.03 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "0.0 0.02 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
								&lt;Transform id = "quad2HalfCircles2" translation = "-0.01 -0.01 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
									&lt;Transform translation = "0.0 0.02 0.0"&gt;
										&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
									&lt;/Transform&gt;
									&lt;Transform id = "quad2HalfCircles3" translation = "-0.01 0.01 0.0"&gt;
										&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
										&lt;Transform translation = "0.0 0.02 0.0"&gt;
											&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
										&lt;/Transform&gt;
										&lt;Transform id = "quad2HalfCircles4" translation = "-0.01 -0.01 0.0"&gt;
											&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
											&lt;Transform translation = "0.0 0.02 0.0"&gt;
												&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
											&lt;/Transform&gt;
										&lt;/Transform&gt;
									&lt;/Transform&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
						&lt;/Transform&gt;
					&lt;/Transform&gt;

					&lt;Transform id = "quad3" translation = "0.0 0.0025 0.0"&gt;
						&lt;Transform id = "quad3HalfCircles" translation = "0.0325 0.0 0.0"&gt;
							&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
							&lt;Transform translation = "-0.02 0.0 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
							&lt;/Transform&gt;
							&lt;Transform translation = "-0.01 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "-0.01 0.01 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
							&lt;Transform id = "quad3HalfCircles1" translation = "-0.03 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "0.0 0.02 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
								&lt;Transform id = "quad3HalfCircles2" translation = "-0.01 -0.01 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
									&lt;Transform translation = "0.0 0.02 0.0"&gt;
										&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
									&lt;/Transform&gt;
									&lt;Transform id = "quad3HalfCircles3" translation = "-0.01 0.01 0.0"&gt;
										&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
										&lt;Transform translation = "0.0 0.02 0.0"&gt;
											&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
										&lt;/Transform&gt;
										&lt;Transform id = "quad3HalfCircles4" translation = "-0.01 -0.01 0.0"&gt;
											&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
											&lt;Transform translation = "0.0 0.02 0.0"&gt;
												&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
											&lt;/Transform&gt;
										&lt;/Transform&gt;
									&lt;/Transform&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
						&lt;/Transform&gt;
					&lt;/Transform&gt;

					&lt;Transform id = "quad4" translation = "0.0 0.0025 0.0" rotation = "0 1 0 3.14159265358979323"&gt;
						&lt;Transform id = "quad4HalfCircles" translation = "0.0325 0.0 0.0"&gt;
							&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
							&lt;Transform translation = "-0.02 0.0 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
							&lt;/Transform&gt;
							&lt;Transform translation = "-0.01 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "-0.01 0.01 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
							&lt;Transform id = "quad4HalfCircles1" translation = "-0.03 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "0.0 0.02 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
								&lt;Transform id = "quad4HalfCircles2" translation = "-0.01 -0.01 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
									&lt;Transform translation = "0.0 0.02 0.0"&gt;
										&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
									&lt;/Transform&gt;
									&lt;Transform id = "quad4HalfCircles3" translation = "-0.01 0.01 0.0"&gt;
										&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
										&lt;Transform translation = "0.0 0.02 0.0"&gt;
											&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
										&lt;/Transform&gt;
										&lt;Transform id = "quad4HalfCircles4" translation = "-0.01 -0.01 0.0"&gt;
											&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
											&lt;Transform translation = "0.0 0.02 0.0"&gt;
												&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standHalfCircle.x3d"&gt;&lt;/Inline&gt;
											&lt;/Transform&gt;
										&lt;/Transform&gt;
									&lt;/Transform&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
						&lt;/Transform&gt;
					&lt;/Transform&gt;

					&lt;Transform id = "quarterCircles"&gt;

						&lt;Transform translation = "0.0 -0.0025 0.0" rotation = "0 0 1 3.14159265358979323"&gt;
							&lt;Transform id = "quad1QuarterCircles" translation = "0.0025 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standQuarterCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "0.0 0.02 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standQuarterCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
						&lt;/Transform&gt;
						
						&lt;Transform translation = "0.0 -0.0025 0.0" rotation = "1 0 0 3.14159265358979323"&gt;
							&lt;Transform id = "quad2QuarterCircles" translation = "0.0025 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standQuarterCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "0.0 0.02 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standQuarterCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
						&lt;/Transform&gt;

						&lt;Transform translation = "0.0 0.0025 0.0"&gt;
							&lt;Transform id = "quad3QuarterCircles" translation = "0.0025 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standQuarterCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "0.0 0.02 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standQuarterCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
						&lt;/Transform&gt;

						&lt;Transform translation = "0.0 0.0025 0.0" rotation = "0 1 0 3.14159265358979323"&gt;
							&lt;Transform id = "quad4QuarterCircles" translation = "0.0025 0.01 0.0"&gt;
								&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standQuarterCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;Transform translation = "0.0 0.02 0.0"&gt;
									&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/standQuarterCircle.x3d"&gt;&lt;/Inline&gt;
								&lt;/Transform&gt;
							&lt;/Transform&gt;
						&lt;/Transform&gt;

					&lt;/Transform&gt;
				&lt;/Transform&gt;
			&lt;/Transform&gt;

			&lt;Transform id = "strongMan" translation = "-0.02 -0.00125 -0.03"&gt;
				&lt;Transform id = "strongManBody" scale = "1 1 1"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/strongManBody.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
				&lt;Transform translation = "0.0 0.0 0.004"&gt;
					&lt;Inline nameSpaceName = " " url = "Four-Bar Pieces/strongManHead.x3d"&gt;&lt;/Inline&gt;
				&lt;/Transform&gt;
				&lt;Transform id = "armsAndLegs" scale = "2.0 1.0 1.0"&gt;
					&lt;Transform id = "longArm" translation = "0.0 0.0 0.0025" scale = "1.0 1.0 1.0" rotation = "1 0 0 3.14159265358979323"&gt;
						&lt;Inline nameSpacename = " " url = "Four-Bar Pieces/strongManBrace.x3d"&gt;&lt;/Inline&gt;
					&lt;/Transform&gt;
					&lt;Transform id = "shortArm" translation = "0.0 0.0 0.0025" scale = "1.0 1.0 1.0" rotation = "0 1 0 3.14159265358979323"&gt;
						&lt;Inline nameSpacename = " " url = "Four-Bar Pieces/strongManBrace.x3d"&gt;&lt;/Inline&gt;
					&lt;/Transform&gt;
					&lt;Transform id = "longLeg" translation = "0.0 0.0 -0.0025" scale = "1.0 1.0 1.0" rotation = "0 0 1 3.14159265358979323"&gt;
						&lt;Inline nameSpacename = " " url = "Four-Bar Pieces/strongManBrace.x3d"&gt;&lt;/Inline&gt;
					&lt;/Transform&gt;
					&lt;Transform id = "shortLeg" translation = "0.0 0.0 -0.0025" scale = "1.0 1.0 1.0"&gt;
						&lt;Inline nameSpacename = " " url = "Four-Bar Pieces/strongManBrace.x3d"&gt;&lt;/Inline&gt;
					&lt;/Transform&gt;
				&lt;/Transform&gt;
			&lt;/Transform&gt;
		&lt;/Transform&gt;
		
		&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - --&gt;	
    	&lt;Transform rotation = "1 0 0  -1.570796326795"&gt;
            &lt;Viewpoint id = "view" centerOfRotation="0 0 0" position="0.04 0 0.2"/&gt;
		&lt;/Transform&gt;
	&lt;/Transform&gt;
  &lt;/scene&gt;
&lt;/x3d&gt;
</t>
<t tx="amd.20151123225337.32">&lt;div id = "rightColumn"&gt;
@others
&lt;/div&gt;
	</t>
<t tx="amd.20151123225337.33">
&lt;div class="inputVariable"&gt;
@others
&lt;/div&gt;
</t>
<t tx="amd.20151123225337.34">
&lt;table class = "table"&gt;
@others
&lt;/table&gt;</t>
<t tx="amd.20151123225337.35">
&lt;tr&gt;
@others
&lt;/tr&gt;
</t>
<t tx="amd.20151123225337.36">
&lt;td class ="sliderTitle" colspan="3"&gt;Base Length (b)&lt;/td&gt;
</t>
<t tx="amd.20151123225337.37">&lt;tr&gt;
@others
&lt;/tr&gt;
				</t>
<t tx="amd.20151123225337.38">
&lt;td colspan = "3"&gt;
@others
&lt;/td&gt;
</t>
<t tx="amd.20151123225337.39">&lt;input class = "slider" id="baseSlider" type="range" style="width:100%" min="1.50" max="7.50"   step="0.01" value="2.00" /&gt; </t>
<t tx="amd.20151123225337.4">&lt;/header&gt;

  	</t>
<t tx="amd.20151123225337.40">&lt;tr&gt;
@others
&lt;/tr&gt;
			</t>
<t tx="amd.20151123225337.41">
&lt;td class="InputLowerLimit"&gt;1.50&lt;/td&gt;
</t>
<t tx="amd.20151123225337.42">&lt;td class="InputCurrentValue"&gt;
@others
&lt;/td&gt;
					</t>
<t tx="amd.20151123225337.43">&lt;input class = "numericInput" id="baseSliderValue" type="number" step="0.01" value = "2.00"/&gt; </t>
<t tx="amd.20151123225337.44">&lt;td class="InputUpperLimit"&gt;7.50&lt;/td&gt;
				</t>
<t tx="amd.20151123225337.45">&lt;br/&gt;
		</t>
<t tx="amd.20151123225337.46">&lt;div class="inputVariable"&gt;
@others
&lt;/div&gt;
		</t>
<t tx="amd.20151123225337.47">
&lt;table class = "table"&gt;
@others
&lt;/table&gt;</t>
<t tx="amd.20151123225337.48">
&lt;tr&gt;
@others
&lt;/tr&gt;
</t>
<t tx="amd.20151123225337.49">
&lt;td class ="sliderTitle" colspan="3"&gt;Coupler Length (c)&lt;/td&gt;
</t>
<t tx="amd.20151123225337.50">&lt;tr&gt;
@others
&lt;/tr&gt;
				</t>
<t tx="amd.20151123225337.51">
&lt;td colspan = "3"&gt;
@others
&lt;/td&gt;
</t>
<t tx="amd.20151123225337.52">&lt;input class = "slider" id="couplerSlider" type="range" style="width:100%" min="1.50" max="4.50"   step="0.01" value="2.00" /&gt; </t>
<t tx="amd.20151123225337.53">&lt;tr&gt;
@others
&lt;/tr&gt;
			</t>
<t tx="amd.20151123225337.54">
&lt;td class="InputLowerLimit"&gt;1.50&lt;/td&gt;
</t>
<t tx="amd.20151123225337.55">&lt;td class="InputCurrentValue"&gt;
@others
&lt;/td&gt;
					</t>
<t tx="amd.20151123225337.56">&lt;input class = "numericInput" id="couplerSliderValue" type="number" step="0.01" value = "2.00"/&gt; </t>
<t tx="amd.20151123225337.57">&lt;td class="InputUpperLimit"&gt;4.50&lt;/td&gt;
				</t>
<t tx="amd.20151123225337.58">&lt;br/&gt;
		</t>
<t tx="amd.20151123225337.59">&lt;div class="inputVariable"&gt;
@others
&lt;/div&gt;
		</t>
<t tx="amd.20151123225337.60">
&lt;table class = "table"&gt;
@others
&lt;/table&gt;</t>
<t tx="amd.20151123225337.61">
&lt;tr&gt;
@others
&lt;/tr&gt;
</t>
<t tx="amd.20151123225337.62">
&lt;td class ="sliderTitle" colspan="3"&gt;Follower Length (f)&lt;/td&gt;
</t>
<t tx="amd.20151123225337.63">&lt;tr&gt;
@others
&lt;/tr&gt;
				</t>
<t tx="amd.20151123225337.64">
&lt;td colspan = "3"&gt;
@others
&lt;/td&gt;
</t>
<t tx="amd.20151123225337.65">&lt;input class = "slider" id="followerSlider" type="range" style="width:100%" min="1.50" max="4.50" step="0.01" value="2.00" /&gt; </t>
<t tx="amd.20151123225337.66">&lt;tr&gt;
@others
&lt;/tr&gt;
			</t>
<t tx="amd.20151123225337.67">
&lt;td class="InputLowerLimit"&gt;1.50&lt;/td&gt;
</t>
<t tx="amd.20151123225337.68">&lt;td class="InputCurrentValue"&gt;
@others
&lt;/td&gt;
					</t>
<t tx="amd.20151123225337.69">&lt;input class = "numericInput" id="followerSliderValue" type="number" step="0.01" value = "2.00"/&gt; </t>
<t tx="amd.20151123225337.70">&lt;td class="InputUpperLimit"&gt;4.50&lt;/td&gt;
				</t>
<t tx="amd.20151123225337.71">&lt;br/&gt;
		</t>
<t tx="amd.20151123225337.72">&lt;div class="inputVariable"&gt;
@others
&lt;/div&gt;
		</t>
<t tx="amd.20151123225337.73">
&lt;table class = "table"&gt;
@others
&lt;/table&gt;</t>
<t tx="amd.20151123225337.74">
&lt;tr&gt;
@others
&lt;/tr&gt;
</t>
<t tx="amd.20151123225337.75">
&lt;td class ="sliderTitle" colspan="3"&gt;CL Value&lt;/td&gt;
</t>
<t tx="amd.20151123225337.76">&lt;tr&gt;
@others
&lt;/tr&gt;
				</t>
<t tx="amd.20151123225337.77">
&lt;td colspan = "3"&gt;
@others
&lt;/td&gt;
</t>
<t tx="amd.20151123225337.78">&lt;input class = "slider" id="CLSlider" type="range" style="width:100%" min="0.00" max="4.00" step="0.01" value="2.00" /&gt; </t>
<t tx="amd.20151123225337.79">&lt;tr&gt;
@others
&lt;/tr&gt;
			</t>
<t tx="amd.20151123225337.80">
&lt;td class="InputLowerLimit"&gt;0.00&lt;/td&gt;
</t>
<t tx="amd.20151123225337.81">&lt;td class="InputCurrentValue"&gt;
@others
&lt;/td&gt;
					</t>
<t tx="amd.20151123225337.82">&lt;input class = "numericInput" id="CLSliderValue" type="number" step="0.01" value = "2.00"/&gt; </t>
<t tx="amd.20151123225337.83">&lt;td class="InputUpperLimit"&gt;4.00&lt;/td&gt;
				</t>
<t tx="amd.20151123225337.84">&lt;br/&gt;
		</t>
<t tx="amd.20151123225337.85">&lt;div class="inputVariable"&gt;
@others
&lt;/div&gt;	
		</t>
<t tx="amd.20151123225337.86">
&lt;table class = "table"&gt;
@others
&lt;/table&gt;</t>
<t tx="amd.20151123225337.87">
&lt;tr&gt;
@others
&lt;/tr&gt;
</t>
<t tx="amd.20151123225337.88">
&lt;td class ="sliderTitle" colspan="3"&gt;CP Value&lt;/td&gt;
</t>
<t tx="amd.20151123225337.89">&lt;tr&gt;
@others
&lt;/tr&gt;
				</t>
<t tx="amd.20151123225337.90">
&lt;td colspan = "3"&gt;
@others
&lt;/td&gt;
</t>
<t tx="amd.20151123225337.91">&lt;input class = "slider" id="CPSlider" type="range" style="width:100%" min="0.00" max="6.00" step="0.01" value="3.00" /&gt; </t>
<t tx="amd.20151123225337.92">&lt;tr&gt;
@others
&lt;/tr&gt;
			</t>
<t tx="amd.20151123225337.93">
&lt;td class="InputLowerLimit"&gt;0.00&lt;/td&gt;
</t>
<t tx="amd.20151123225337.94">&lt;td class="InputCurrentValue"&gt;
@others
&lt;/td&gt;
					</t>
<t tx="amd.20151123225337.95">&lt;input class = "numericInput" id="CPSliderValue" type="number" step="0.01" value = "3.00"/&gt; </t>
<t tx="amd.20151123225337.96">&lt;td class="InputUpperLimit"&gt;6.00&lt;/td&gt;
				</t>
<t tx="amd.20151123225337.97">&lt;br/&gt;
		</t>
<t tx="amd.20151123225337.98">&lt;div class="inputVariable"&gt;
@others
&lt;/div&gt;
		</t>
<t tx="amd.20151123225337.99">
&lt;table class = "table"&gt;
@others
&lt;/table&gt;</t>
<t tx="amd.20151123233132.1">@language xml
@tabwidth -4
@others

&lt;!-- #EndTemplate --&gt;
</t>
<t tx="amd.20151123233750.1">&lt;div&gt;
&lt;table class = "table"&gt;
&lt;tr&gt;
    &lt;td id = "initialValues" style="visibility: hidden"&gt; {"b":3.25,"c":3.5,"f":2.75,"cl":2,"cp":4.25,"theta":120} &lt;/td&gt;				&lt;/tr&gt;
&lt;/table&gt;

&lt;/div&gt;</t>
</tnodes>
</leo_file>
